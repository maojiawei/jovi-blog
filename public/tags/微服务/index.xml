<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务 on jovi&#39;s blog</title>
    <link>http://jovi.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 微服务 on jovi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 17 Dec 2017 18:20:30 +0800</lastBuildDate>
    
	<atom:link href="http://jovi.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>springboot与rabbitmq整合</title>
      <link>http://jovi.io/post/microservice/rabbitmq-introduce/</link>
      <pubDate>Sun, 17 Dec 2017 18:20:30 +0800</pubDate>
      
      <guid>http://jovi.io/post/microservice/rabbitmq-introduce/</guid>
      <description>简单介绍 微服务中消息队列也是最终的一块，主要解决在微服务中应用，异步消息等问题。目前使用较多的消息队列有：kafka、rabbitmq、zeromq以及activeMQ等。本章重点介绍的是rabbitmq。
前提准备 本例的rabbitmq的版本为rabbitmq:3.6.6-management，采用docker安装的方式。
在安装docker的电脑上输入以下命令,浏览器中输入localhost:15672或者linux中运行curl localhost:15672即可
docker run -d --name=rabbitmq -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin rabbitmq:3.6.6-management  docker run 表示docker启动容器。 --name表示容器名称。 -p 表示端口，rabbitmq的5672为AMQP协议端口，15672为管理界面端口。 -e 为对应参数，本例中默认的用户名密码为admin/admin rabbitmq:3.6.6-management 表示镜像名称，本例默认为docker官方镜像  使用 消息队列一般有三个核心组件：消息发送者，队列，消息接收者。RabbitMQ在此基础上添加了交换器 (Exchange)的概念。所以，在Rabbitmq中，消息发送者将消息发送至交换机中，再由交换机根据调度策略发送给队列，最后，由消息接收者接收消息。
具体如下图所示:
一般Rabbitmq有三种常用模式:
1.Direct Exchange
2.Topic Exchange
3.Fanout Exchange
Direct Exchange Direct Exchange是RabbitMQ默认的交换形式，如下图所示，exchange直接根据routing_key（路由键）去将消息发送至对应的队列中。 直接启动项目并在命令行输入curl localhost:8080/hello,控制台输入以下内容
Sender : hello Sun Dec 17 16:16:47 CST 2017 Receiver : hello Sun Dec 17 16:16:47 CST 2017  具体实现如下:
配置队列,在项目中配置了一个hello的队列。</description>
    </item>
    
    <item>
      <title>Spring Cloud 介绍</title>
      <link>http://jovi.io/post/microservice/spring-cloud-introduce/</link>
      <pubDate>Mon, 11 Dec 2017 22:46:33 +0800</pubDate>
      
      <guid>http://jovi.io/post/microservice/spring-cloud-introduce/</guid>
      <description>简介 Spring cloud是目前最流行的微服务框架。它是在spring boot的基础上构建的，用于快速构建分布式系统的通用模式的工具集。Spring Cloud 包含了许多子项目，提供了一些工具来快速构建分布式系统中一些常用模式，分布式配置管理、服务注册和发现、断路器、智能路由、全局锁等。
同类对比 很多人都会讲spring cloud与dubbo对比，但其实Dubbo只是实现了服务治理，而Spring Cloud的各类组件覆盖了微服务架构的方方面面，服务治理只是其中的一个方面。当然dubbo也有好消息，就是阿里巴巴开始重新维护dubbo了，但以目前来说，spring cloud更全面。以下是对spring cloud与dubbo的全面对比。
   功能 dubbo spring Cloud     服务注册中心 Zookeeper Spring Cloud Netflix Eureka   服务调用方式 RPC REST API   服务网关 无 Spring Cloud Netflix Zuul   断路器 不完善 Spring Cloud Netflix Hystrix   分布式配置 无 Spring Cloud Config   服务跟踪 无 Spring Cloud Sleuth   消息总线 无 Spring Cloud Bus   数据流 无 Spring Cloud Stream   批量任务 无 Spring Cloud Task   …… …… ……    组件 Spring cloud的最常用的组件如下图所示.</description>
    </item>
    
  </channel>
</rss>